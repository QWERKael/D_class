// Code generated by protoc-gen-go. DO NOT EDIT.
// source: honeycomb/dance.proto

package dance

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CmdRequest_CmdType int32

const (
	CmdRequest_Set      CmdRequest_CmdType = 0
	CmdRequest_Get      CmdRequest_CmdType = 1
	CmdRequest_Delete   CmdRequest_CmdType = 2
	CmdRequest_CreateDB CmdRequest_CmdType = 3
	CmdRequest_ShowDB   CmdRequest_CmdType = 4
	CmdRequest_Keys     CmdRequest_CmdType = 5
)

var CmdRequest_CmdType_name = map[int32]string{
	0: "Set",
	1: "Get",
	2: "Delete",
	3: "CreateDB",
	4: "ShowDB",
	5: "Keys",
}

var CmdRequest_CmdType_value = map[string]int32{
	"Set":      0,
	"Get":      1,
	"Delete":   2,
	"CreateDB": 3,
	"ShowDB":   4,
	"Keys":     5,
}

func (x CmdRequest_CmdType) String() string {
	return proto.EnumName(CmdRequest_CmdType_name, int32(x))
}

func (CmdRequest_CmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6f8cec8a1736d010, []int{0, 0}
}

type CmdReply_ExeState int32

const (
	CmdReply_Ok  CmdReply_ExeState = 0
	CmdReply_Err CmdReply_ExeState = 1
)

var CmdReply_ExeState_name = map[int32]string{
	0: "Ok",
	1: "Err",
}

var CmdReply_ExeState_value = map[string]int32{
	"Ok":  0,
	"Err": 1,
}

func (x CmdReply_ExeState) String() string {
	return proto.EnumName(CmdReply_ExeState_name, int32(x))
}

func (CmdReply_ExeState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6f8cec8a1736d010, []int{1, 0}
}

type CmdRequest struct {
	UsingDB              string             `protobuf:"bytes,1,opt,name=UsingDB,proto3" json:"UsingDB,omitempty"`
	Cmd                  CmdRequest_CmdType `protobuf:"varint,2,opt,name=cmd,proto3,enum=dance.CmdRequest_CmdType" json:"cmd,omitempty"`
	Args                 [][]byte           `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CmdRequest) Reset()         { *m = CmdRequest{} }
func (m *CmdRequest) String() string { return proto.CompactTextString(m) }
func (*CmdRequest) ProtoMessage()    {}
func (*CmdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f8cec8a1736d010, []int{0}
}

func (m *CmdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmdRequest.Unmarshal(m, b)
}
func (m *CmdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmdRequest.Marshal(b, m, deterministic)
}
func (m *CmdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdRequest.Merge(m, src)
}
func (m *CmdRequest) XXX_Size() int {
	return xxx_messageInfo_CmdRequest.Size(m)
}
func (m *CmdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CmdRequest proto.InternalMessageInfo

func (m *CmdRequest) GetUsingDB() string {
	if m != nil {
		return m.UsingDB
	}
	return ""
}

func (m *CmdRequest) GetCmd() CmdRequest_CmdType {
	if m != nil {
		return m.Cmd
	}
	return CmdRequest_Set
}

func (m *CmdRequest) GetArgs() [][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

type CmdReply struct {
	Status               CmdReply_ExeState `protobuf:"varint,1,opt,name=status,proto3,enum=dance.CmdReply_ExeState" json:"status,omitempty"`
	Message              string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Results              [][]byte          `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CmdReply) Reset()         { *m = CmdReply{} }
func (m *CmdReply) String() string { return proto.CompactTextString(m) }
func (*CmdReply) ProtoMessage()    {}
func (*CmdReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f8cec8a1736d010, []int{1}
}

func (m *CmdReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmdReply.Unmarshal(m, b)
}
func (m *CmdReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmdReply.Marshal(b, m, deterministic)
}
func (m *CmdReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdReply.Merge(m, src)
}
func (m *CmdReply) XXX_Size() int {
	return xxx_messageInfo_CmdReply.Size(m)
}
func (m *CmdReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdReply.DiscardUnknown(m)
}

var xxx_messageInfo_CmdReply proto.InternalMessageInfo

func (m *CmdReply) GetStatus() CmdReply_ExeState {
	if m != nil {
		return m.Status
	}
	return CmdReply_Ok
}

func (m *CmdReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CmdReply) GetResults() [][]byte {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterEnum("dance.CmdRequest_CmdType", CmdRequest_CmdType_name, CmdRequest_CmdType_value)
	proto.RegisterEnum("dance.CmdReply_ExeState", CmdReply_ExeState_name, CmdReply_ExeState_value)
	proto.RegisterType((*CmdRequest)(nil), "dance.CmdRequest")
	proto.RegisterType((*CmdReply)(nil), "dance.CmdReply")
}

func init() { proto.RegisterFile("honeycomb/dance.proto", fileDescriptor_6f8cec8a1736d010) }

var fileDescriptor_6f8cec8a1736d010 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xd1, 0x4e, 0xc2, 0x30,
	0x14, 0x86, 0x29, 0x83, 0x31, 0x4e, 0x08, 0xd6, 0x93, 0x98, 0x4c, 0xbd, 0x21, 0xbb, 0x22, 0x31,
	0x01, 0x83, 0xb7, 0x5e, 0xb1, 0x11, 0x2f, 0xb8, 0x30, 0x19, 0xfa, 0x00, 0x85, 0x9d, 0x80, 0x71,
	0x5b, 0x67, 0xdb, 0x45, 0xf7, 0x10, 0xbe, 0x8d, 0x0f, 0x68, 0x5a, 0x58, 0x34, 0x7a, 0xf7, 0xff,
	0x39, 0x7f, 0x4f, 0xbf, 0xbf, 0x85, 0x8b, 0x83, 0x2c, 0xa9, 0xd9, 0xc9, 0x62, 0x3b, 0xcf, 0x44,
	0xb9, 0xa3, 0x59, 0xa5, 0xa4, 0x91, 0xd8, 0x77, 0x26, 0xfa, 0x62, 0x00, 0x71, 0x91, 0xa5, 0xf4,
	0x56, 0x93, 0x36, 0x18, 0xc2, 0xe0, 0x59, 0xbf, 0x94, 0xfb, 0x64, 0x19, 0xb2, 0x09, 0x9b, 0x0e,
	0xd3, 0xd6, 0xe2, 0x0d, 0x78, 0xbb, 0x22, 0x0b, 0xbb, 0x13, 0x36, 0x1d, 0x2f, 0x2e, 0x67, 0xc7,
	0x55, 0x3f, 0x27, 0xad, 0x7c, 0x6a, 0x2a, 0x4a, 0x6d, 0x0a, 0x11, 0x7a, 0x42, 0xed, 0x75, 0xe8,
	0x4d, 0xbc, 0xe9, 0x28, 0x75, 0x3a, 0x5a, 0xc3, 0xe0, 0x94, 0xc1, 0x01, 0x78, 0x1b, 0x32, 0xbc,
	0x63, 0xc5, 0x03, 0x19, 0xce, 0x10, 0xc0, 0x4f, 0x28, 0x27, 0x43, 0xbc, 0x8b, 0x23, 0x08, 0x62,
	0x45, 0xc2, 0x50, 0xb2, 0xe4, 0x9e, 0x9d, 0x6c, 0x0e, 0xf2, 0x3d, 0x59, 0xf2, 0x1e, 0x06, 0xd0,
	0x5b, 0x53, 0xa3, 0x79, 0x3f, 0xfa, 0x64, 0x10, 0xb8, 0xcb, 0xab, 0xbc, 0xc1, 0x5b, 0xf0, 0xb5,
	0x11, 0xa6, 0xd6, 0x8e, 0x79, 0xbc, 0x08, 0x7f, 0xd3, 0x55, 0x79, 0x33, 0x5b, 0x7d, 0xd0, 0xc6,
	0x08, 0x43, 0xe9, 0x29, 0x67, 0x6b, 0x16, 0xa4, 0xb5, 0xd8, 0x93, 0x2b, 0x34, 0x4c, 0x5b, 0x6b,
	0x27, 0x8a, 0x74, 0x9d, 0x9b, 0x16, 0xbe, 0xb5, 0xd1, 0x35, 0x04, 0xed, 0x1e, 0xf4, 0xa1, 0xfb,
	0xf8, 0x7a, 0xe4, 0x5f, 0x29, 0xc5, 0xd9, 0xe2, 0x1e, 0x86, 0xb1, 0x2c, 0x0a, 0x51, 0x66, 0xa4,
	0x70, 0xee, 0x9a, 0xc6, 0x22, 0xcf, 0xf1, 0xfc, 0xdf, 0x43, 0x5d, 0x9d, 0xfd, 0xa1, 0x8b, 0x3a,
	0x5b, 0xdf, 0x7d, 0xc9, 0xdd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0x16, 0x72, 0xb1, 0xab,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommanderClient is the client API for Commander service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommanderClient interface {
	CmdCall(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdReply, error)
}

type commanderClient struct {
	cc *grpc.ClientConn
}

func NewCommanderClient(cc *grpc.ClientConn) CommanderClient {
	return &commanderClient{cc}
}

func (c *commanderClient) CmdCall(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdReply, error) {
	out := new(CmdReply)
	err := c.cc.Invoke(ctx, "/dance.Commander/CmdCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommanderServer is the server API for Commander service.
type CommanderServer interface {
	CmdCall(context.Context, *CmdRequest) (*CmdReply, error)
}

// UnimplementedCommanderServer can be embedded to have forward compatible implementations.
type UnimplementedCommanderServer struct {
}

func (*UnimplementedCommanderServer) CmdCall(ctx context.Context, req *CmdRequest) (*CmdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CmdCall not implemented")
}

func RegisterCommanderServer(s *grpc.Server, srv CommanderServer) {
	s.RegisterService(&_Commander_serviceDesc, srv)
}

func _Commander_CmdCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServer).CmdCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dance.Commander/CmdCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServer).CmdCall(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Commander_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dance.Commander",
	HandlerType: (*CommanderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CmdCall",
			Handler:    _Commander_CmdCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "honeycomb/dance.proto",
}
